import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
from imblearn.over_sampling import SMOTE 
import matplotlib.pyplot as plt
import seaborn as sns



np.random.seed(42) 

num_normal = 10000
normal_data = {
    'Time': np.random.uniform(0, 172800, num_normal), 
    'V1': np.random.normal(0, 1, num_normal), 
    'V2': np.random.normal(0, 1, num_normal), 
    'V3': np.random.normal(0, 1, num_normal), 
    'V4': np.random.normal(0, 1, num_normal), 
    'V5': np.random.normal(0, 1, num_normal),
    'V6': np.random.normal(0, 1, num_normal),
    'V7': np.random.normal(0, 1, num_normal),
    'V8': np.random.normal(0, 1, num_normal),
    'V9': np.random.normal(0, 1, num_normal),
    'V10': np.random.normal(0, 1, num_normal),
    'V11': np.random.normal(0, 1, num_normal),
    'V12': np.random.normal(0, 1, num_normal),
    'V13': np.random.normal(0, 1, num_normal),
    'V14': np.random.normal(0, 1, num_normal),
    'V15': np.random.normal(0, 1, num_normal),
    'V16': np.random.normal(0, 1, num_normal),
    'V17': np.random.normal(0, 1, num_normal),
    'V18': np.random.normal(0, 1, num_normal),
    'V19': np.random.normal(0, 1, num_normal),
    'V20': np.random.normal(0, 1, num_normal),
    'V21': np.random.normal(0, 1, num_normal),
    'V22': np.random.normal(0, 1, num_normal),
    'V23': np.random.normal(0, 1, num_normal),
    'V24': np.random.normal(0, 1, num_normal),
    'V25': np.random.normal(0, 1, num_normal),
    'V26': np.random.normal(0, 1, num_normal),
    'V27': np.random.normal(0, 1, num_normal),
    'V28': np.random.normal(0, 1, num_normal),
    'Amount': np.random.uniform(1, 200, num_normal),
    'Class': 0 
}
normal_df = pd.DataFrame(normal_data)

num_fraud = 50
fraud_data = {
    'Time': np.random.uniform(0, 172800, num_fraud),
    'V1': np.random.normal(-2, 2, num_fraud),
    'V2': np.random.normal(2, 1, num_fraud),
    'V3': np.random.normal(-3, 2, num_fraud),
    'V4': np.random.normal(3, 1, num_fraud),
    'V5': np.random.normal(-2, 1, num_fraud),
    'V6': np.random.normal(-1, 0.5, num_fraud),
    'V7': np.random.normal(-2, 1, num_fraud),
    'V8': np.random.normal(0, 0.5, num_fraud),
    'V9': np.random.normal(-1, 1, num_fraud),
    'V10': np.random.normal(-2, 1, num_fraud),
    'V11': np.random.normal(2, 1, num_fraud),
    'V12': np.random.normal(-2, 1, num_fraud),
    'V13': np.random.normal(0, 0.5, num_fraud),
    'V14': np.random.normal(-2, 1, num_fraud),
    'V15': np.random.normal(0, 0.5, num_fraud),
    'V16': np.random.normal(-2, 1, num_fraud),
    'V17': np.random.normal(-1, 1, num_fraud),
    'V18': np.random.normal(-1, 1, num_fraud),
    'V19': np.random.normal(0, 0.5, num_fraud),
    'V20': np.random.normal(0, 0.5, num_fraud),
    'V21': np.random.normal(0, 0.5, num_fraud),
    'V22': np.random.normal(0, 0.5, num_fraud),
    'V23': np.random.normal(0, 0.5, num_fraud),
    'V24': np.random.normal(0, 0.5, num_fraud),
    'V25': np.random.normal(0, 0.5, num_fraud),
    'V26': np.random.normal(0, 0.5, num_fraud),
    'V27': np.random.normal(0, 0.5, num_fraud),
    'V28': np.random.normal(0, 0.5, num_fraud),
    'Amount': np.random.uniform(500, 1500, num_fraud), 
    'Class': 1 
}
fraud_df = pd.DataFrame(fraud_data)

df = pd.concat([normal_df, fraud_df], ignore_index=True)
df = df.sample(frac=1).reset_index(drop=True) 

print("--- Initial Dataset Sample (first 5 rows) ---")
print(df.head())
print("\n--- Class Distribution (before handling imbalance) ---")
print(df['Class'].value_counts())
print(f"Fraudulent transactions make up: {df['Class'].value_counts()[1] / len(df) * 100:.4f}% of the data.")



X = df.drop('Class', axis=1) 
y = df['Class'] 


scaler = StandardScaler()
X['Time'] = scaler.fit_transform(X[['Time']])
X['Amount'] = scaler.fit_transform(X[['Amount']])

print("\n--- Features (X) Sample After Scaling (first 5 rows of Time and Amount) ---")
print(X[['Time', 'Amount']].head())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print(f"\nTraining set shape: X_train={X_train.shape}, y_train={y_train.shape}")
print(f"Testing set shape: X_test={X_test.shape}, y_test={y_test.shape}")
print("\n--- Class Distribution in Training Set ---")
print(y_train.value_counts(normalize=True))
print("\n--- Class Distribution in Testing Set ---")
print(y_test.value_counts(normalize=True))


print("\n--- Applying SMOTE to Training Data ---")
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train) # type: ignore

print(f"Original training set class distribution: {y_train.value_counts()}")
print(f"Resampled training set class distribution: {y_train_resampled.value_counts()}")



model = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')


print("\n--- Training the RandomForestClassifier Model ---")
model.fit(X_train_resampled, y_train_resampled)
print("Model training complete.")



y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)[:, 1] 

print("\n--- Model Evaluation on Testing Data ---")

cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(cm)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Normal (0)', 'Fraud (1)'], yticklabels=['Normal (0)', 'Fraud (1)'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

roc_auc = roc_auc_score(y_test, y_pred_proba)
print(f"ROC AUC Score: {roc_auc:.4f}")

fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='red', lw=2, linestyle='--', label='Random Guess')
plt.xlabel('False Positive Rate (FPR)')
plt.ylabel('True Positive Rate (TPR) / Recall')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()

def new_func():
    print("\nDHANYAWAAD")

new_func()
